#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
#set -e

# debug
set -ex

# parse and derive params
LP_DIR=`cd $(dirname $0); cd ..; pwd`
BUILD_DIR=$1
CACHE_DIR=$2
ARTANIS_VERSION=0.4

function indent() {
	c='s/^/       /'

	case $(uname) in
		Darwin)
			sed -l "$c"
			;;
		*)
			sed -u "$c"
			;;
	esac
}

function topic() {
	echo "-----> $*"
}



APT_CACHE_DIR="$CACHE_DIR/apt-artanis/cache"
APT_STATE_DIR="$CACHE_DIR/apt-artanis/state"
APT_SOURCELIST_DIR="$CACHE_DIR/apt-artanis/sources"   # place custom sources.list here
APT_SOURCES="$APT_SOURCELIST_DIR/sources.list"
APT_VERSION=$(apt-get -v | awk 'NR == 1{ print $2 }')

BUILDS_CACHE_DIR="$CACHE_DIR/artanis-builds"

# Store which STACK we are running on in the cache to bust the cache if it changes
if [ -f $CACHE_DIR/.apt/STACK ]; then
	CACHED_STACK=$(cat "$CACHE_DIR/.apt/STACK")
else
	CACHED_STACK=$STACK
fi

case "$APT_VERSION" in
	0* | 1.0*)
		APT_FORCE_YES="--force-yes"
		;;
	*)
    APT_FORCE_YES="--allow-downgrades --allow-remove-essential --allow-change-held-packages"
		;;
esac

if
	[[ $CACHED_STACK == $STACK ]]
then
	# STACK has not changed
	topic "Reusing cache"
else
	# STACK changed
	topic "Detected Stack changes, flushing cache"

	rm -rf $APT_CACHE_DIR
	mkdir -p "$APT_CACHE_DIR/archives/partial"
	mkdir -p "$APT_STATE_DIR/lists/partial"
	mkdir -p "$APT_SOURCELIST_DIR"   # make dir for sources

	rm -rf $BUILDS_CACHE_DIR

	cat "/etc/apt/sources.list" > "$APT_SOURCES"    # no cp here
fi

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"
# Override the use of /etc/apt/sources.list (sourcelist) and /etc/apt/sources.list.d/* (sourceparts).
APT_OPTIONS="$APT_OPTIONS -o dir::etc::sourcelist=$APT_SOURCES -o dir::etc::sourceparts=/dev/null"



topic "Updating apt caches"
apt-get $APT_OPTIONS update | indent

apt-get $APT_OPTIONS -y $APT_FORCE_YES -d install --reinstall libnss3 | indent

mkdir -p $BUILD_DIR/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
	topic "Installing $(basename $DEB)"

	dpkg -x $DEB $BUILD_DIR/.apt/
done



#give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH|GUILE_LOAD_PATH)=' > "$LP_DIR/export"



mkdir -p $BUILDS_CACHE_DIR && cd $BUILDS_CACHE_DIR

topic "Installing Artanis"
if
	[ ! -d "$BUILDS_CACHE_DIR/artanis-$ARTANIS_VERSION" ]
then
	wget -c http://ftp.gnu.org/gnu/artanis/artanis-$ARTANIS_VERSION.tar.bz2           && \
		tar xvjf artanis-$ARTANIS_VERSION.tar.bz2                                       && \
		rm -f artanis-$ARTANIS_VERSION.tar.bz2
fi

cd artanis-$ARTANIS_VERSION && ./configure --prefix=$BUILD_DIR/.apt/usr && make && make install && cd ..
